// File: gen/verilog/processing_array_3x3.v
// Generated by MyHDL 0.11.51
// Date:    Wed May 28 23:01:49 2025 UTC


`timescale 1ns/10ps

module processing_array_3x3 (
    clk,
    i_reset,
    i_a_vector,
    i_b_vector,
    i_data_valid,
    i_read_enable,
    i_clear_acc,
    o_result_matrix,
    o_computation_done,
    o_overflow_detected
);
// 3x3 Processing Array for matrix multiplication using validated processing elements.
// 
// This array performs matrix multiplication by computing dot products in parallel.
// Each PE accumulates partial results across multiple cycles. Results are output stationary.
// 
// Parameters:
// - clk: Clock signal
// - i_reset: Reset signal (active high)
// - i_a_vector: Column vector from matrix A (24 bits = 3 x 8-bit elements)
// - i_b_vector: Row vector from matrix B (24 bits = 3 x 8-bit elements)
// - i_data_valid: Start computation when high
// - i_read_enable: Enable reading results
// - i_clear_acc: Clear all accumulators
// - o_result_matrix: Flattened 3x3 result matrix (288 bits = 9 x 32-bit elements)
// - o_computation_done: All PEs completed their MAC operations
// - o_overflow_detected: At least one PE detected overflow

input clk;
input i_reset;
input [23:0] i_a_vector;
input [23:0] i_b_vector;
input i_data_valid;
input i_read_enable;
input i_clear_acc;
output [287:0] o_result_matrix;
reg [287:0] o_result_matrix;
output o_computation_done;
reg o_computation_done;
output o_overflow_detected;
wire o_overflow_detected;

reg [0:0] state;
reg [287:0] temp_result_matrix;
wire all_pes_done;
reg signed [31:0] processing_element9_accumulator;
reg processing_element9_done_flag;
reg processing_element9_overflow_flag;
wire signed [15:0] processing_element9_product;
reg signed [15:0] processing_element9_product_latched;
reg processing_element9_valid_product;
reg signed [31:0] processing_element10_accumulator;
reg processing_element10_done_flag;
reg processing_element10_overflow_flag;
wire signed [15:0] processing_element10_product;
reg signed [15:0] processing_element10_product_latched;
reg processing_element10_valid_product;
reg signed [31:0] processing_element11_accumulator;
reg processing_element11_done_flag;
reg processing_element11_overflow_flag;
wire signed [15:0] processing_element11_product;
reg signed [15:0] processing_element11_product_latched;
reg processing_element11_valid_product;
reg signed [31:0] processing_element12_accumulator;
reg processing_element12_done_flag;
reg processing_element12_overflow_flag;
wire signed [15:0] processing_element12_product;
reg signed [15:0] processing_element12_product_latched;
reg processing_element12_valid_product;
reg signed [31:0] processing_element13_accumulator;
reg processing_element13_done_flag;
reg processing_element13_overflow_flag;
wire signed [15:0] processing_element13_product;
reg signed [15:0] processing_element13_product_latched;
reg processing_element13_valid_product;
reg signed [31:0] processing_element14_accumulator;
reg processing_element14_done_flag;
reg processing_element14_overflow_flag;
wire signed [15:0] processing_element14_product;
reg signed [15:0] processing_element14_product_latched;
reg processing_element14_valid_product;
reg signed [31:0] processing_element15_accumulator;
reg processing_element15_done_flag;
reg processing_element15_overflow_flag;
wire signed [15:0] processing_element15_product;
reg signed [15:0] processing_element15_product_latched;
reg processing_element15_valid_product;
reg signed [31:0] processing_element16_accumulator;
reg processing_element16_done_flag;
reg processing_element16_overflow_flag;
wire signed [15:0] processing_element16_product;
reg signed [15:0] processing_element16_product_latched;
reg processing_element16_valid_product;
reg signed [31:0] processing_element17_accumulator;
reg processing_element17_done_flag;
reg processing_element17_overflow_flag;
wire signed [15:0] processing_element17_product;
reg signed [15:0] processing_element17_product_latched;
reg processing_element17_valid_product;
wire signed [7:0] a_slices [0:3-1];
wire signed [7:0] b_slices [0:3-1];
wire pe_dones [0:9-1];
wire pe_overflows [0:9-1];
wire signed [31:0] pe_results [0:9-1];




assign a_slices[0] = i_a_vector[7-1:0];
assign a_slices[1] = i_a_vector[15-1:8];
assign a_slices[2] = i_a_vector[23-1:16];
assign b_slices[0] = i_b_vector[7-1:0];
assign b_slices[1] = i_b_vector[15-1:8];
assign b_slices[2] = i_b_vector[23-1:16];



assign processing_element9_product = (a_slices[0] * b_slices[0]);


always @(posedge clk) begin: processing_element9_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element9_valid_product <= 0;
        processing_element9_product_latched <= 0;
        processing_element9_done_flag <= 0;
        processing_element9_accumulator <= 0;
        processing_element9_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element9_accumulator <= 0;
            processing_element9_product_latched <= 0;
            processing_element9_valid_product <= 1'b0;
            processing_element9_done_flag <= 1'b0;
            processing_element9_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element9_valid_product))) begin
            processing_element9_product_latched <= processing_element9_product;
            processing_element9_valid_product <= 1'b1;
            processing_element9_done_flag <= 1'b0;
        end
        else if (processing_element9_valid_product) begin
            temp_sum = (processing_element9_accumulator + processing_element9_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element9_accumulator <= 33'h7fffffff;
                processing_element9_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element9_accumulator <= (-33'h80000000);
                processing_element9_overflow_flag <= 1'b1;
            end
            else begin
                processing_element9_accumulator <= temp_sum;
                processing_element9_overflow_flag <= 1'b0;
            end
            processing_element9_done_flag <= 1'b1;
            processing_element9_valid_product <= 1'b0;
        end
        else begin
            processing_element9_done_flag <= 1'b0;
        end
    end
end



assign pe_results[0] = processing_element9_accumulator;
assign pe_overflows[0] = processing_element9_overflow_flag;
assign pe_dones[0] = processing_element9_done_flag;



assign processing_element10_product = (a_slices[0] * b_slices[1]);


always @(posedge clk) begin: processing_element10_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element10_valid_product <= 0;
        processing_element10_product_latched <= 0;
        processing_element10_done_flag <= 0;
        processing_element10_accumulator <= 0;
        processing_element10_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element10_accumulator <= 0;
            processing_element10_product_latched <= 0;
            processing_element10_valid_product <= 1'b0;
            processing_element10_done_flag <= 1'b0;
            processing_element10_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element10_valid_product))) begin
            processing_element10_product_latched <= processing_element10_product;
            processing_element10_valid_product <= 1'b1;
            processing_element10_done_flag <= 1'b0;
        end
        else if (processing_element10_valid_product) begin
            temp_sum = (processing_element10_accumulator + processing_element10_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element10_accumulator <= 33'h7fffffff;
                processing_element10_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element10_accumulator <= (-33'h80000000);
                processing_element10_overflow_flag <= 1'b1;
            end
            else begin
                processing_element10_accumulator <= temp_sum;
                processing_element10_overflow_flag <= 1'b0;
            end
            processing_element10_done_flag <= 1'b1;
            processing_element10_valid_product <= 1'b0;
        end
        else begin
            processing_element10_done_flag <= 1'b0;
        end
    end
end



assign pe_results[1] = processing_element10_accumulator;
assign pe_overflows[1] = processing_element10_overflow_flag;
assign pe_dones[1] = processing_element10_done_flag;



assign processing_element11_product = (a_slices[0] * b_slices[2]);


always @(posedge clk) begin: processing_element11_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element11_valid_product <= 0;
        processing_element11_product_latched <= 0;
        processing_element11_done_flag <= 0;
        processing_element11_accumulator <= 0;
        processing_element11_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element11_accumulator <= 0;
            processing_element11_product_latched <= 0;
            processing_element11_valid_product <= 1'b0;
            processing_element11_done_flag <= 1'b0;
            processing_element11_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element11_valid_product))) begin
            processing_element11_product_latched <= processing_element11_product;
            processing_element11_valid_product <= 1'b1;
            processing_element11_done_flag <= 1'b0;
        end
        else if (processing_element11_valid_product) begin
            temp_sum = (processing_element11_accumulator + processing_element11_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element11_accumulator <= 33'h7fffffff;
                processing_element11_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element11_accumulator <= (-33'h80000000);
                processing_element11_overflow_flag <= 1'b1;
            end
            else begin
                processing_element11_accumulator <= temp_sum;
                processing_element11_overflow_flag <= 1'b0;
            end
            processing_element11_done_flag <= 1'b1;
            processing_element11_valid_product <= 1'b0;
        end
        else begin
            processing_element11_done_flag <= 1'b0;
        end
    end
end



assign pe_results[2] = processing_element11_accumulator;
assign pe_overflows[2] = processing_element11_overflow_flag;
assign pe_dones[2] = processing_element11_done_flag;



assign processing_element12_product = (a_slices[1] * b_slices[0]);


always @(posedge clk) begin: processing_element12_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element12_valid_product <= 0;
        processing_element12_product_latched <= 0;
        processing_element12_done_flag <= 0;
        processing_element12_accumulator <= 0;
        processing_element12_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element12_accumulator <= 0;
            processing_element12_product_latched <= 0;
            processing_element12_valid_product <= 1'b0;
            processing_element12_done_flag <= 1'b0;
            processing_element12_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element12_valid_product))) begin
            processing_element12_product_latched <= processing_element12_product;
            processing_element12_valid_product <= 1'b1;
            processing_element12_done_flag <= 1'b0;
        end
        else if (processing_element12_valid_product) begin
            temp_sum = (processing_element12_accumulator + processing_element12_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element12_accumulator <= 33'h7fffffff;
                processing_element12_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element12_accumulator <= (-33'h80000000);
                processing_element12_overflow_flag <= 1'b1;
            end
            else begin
                processing_element12_accumulator <= temp_sum;
                processing_element12_overflow_flag <= 1'b0;
            end
            processing_element12_done_flag <= 1'b1;
            processing_element12_valid_product <= 1'b0;
        end
        else begin
            processing_element12_done_flag <= 1'b0;
        end
    end
end



assign pe_results[3] = processing_element12_accumulator;
assign pe_overflows[3] = processing_element12_overflow_flag;
assign pe_dones[3] = processing_element12_done_flag;



assign processing_element13_product = (a_slices[1] * b_slices[1]);


always @(posedge clk) begin: processing_element13_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element13_valid_product <= 0;
        processing_element13_product_latched <= 0;
        processing_element13_done_flag <= 0;
        processing_element13_accumulator <= 0;
        processing_element13_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element13_accumulator <= 0;
            processing_element13_product_latched <= 0;
            processing_element13_valid_product <= 1'b0;
            processing_element13_done_flag <= 1'b0;
            processing_element13_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element13_valid_product))) begin
            processing_element13_product_latched <= processing_element13_product;
            processing_element13_valid_product <= 1'b1;
            processing_element13_done_flag <= 1'b0;
        end
        else if (processing_element13_valid_product) begin
            temp_sum = (processing_element13_accumulator + processing_element13_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element13_accumulator <= 33'h7fffffff;
                processing_element13_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element13_accumulator <= (-33'h80000000);
                processing_element13_overflow_flag <= 1'b1;
            end
            else begin
                processing_element13_accumulator <= temp_sum;
                processing_element13_overflow_flag <= 1'b0;
            end
            processing_element13_done_flag <= 1'b1;
            processing_element13_valid_product <= 1'b0;
        end
        else begin
            processing_element13_done_flag <= 1'b0;
        end
    end
end



assign pe_results[4] = processing_element13_accumulator;
assign pe_overflows[4] = processing_element13_overflow_flag;
assign pe_dones[4] = processing_element13_done_flag;



assign processing_element14_product = (a_slices[1] * b_slices[2]);


always @(posedge clk) begin: processing_element14_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element14_valid_product <= 0;
        processing_element14_product_latched <= 0;
        processing_element14_done_flag <= 0;
        processing_element14_accumulator <= 0;
        processing_element14_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element14_accumulator <= 0;
            processing_element14_product_latched <= 0;
            processing_element14_valid_product <= 1'b0;
            processing_element14_done_flag <= 1'b0;
            processing_element14_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element14_valid_product))) begin
            processing_element14_product_latched <= processing_element14_product;
            processing_element14_valid_product <= 1'b1;
            processing_element14_done_flag <= 1'b0;
        end
        else if (processing_element14_valid_product) begin
            temp_sum = (processing_element14_accumulator + processing_element14_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element14_accumulator <= 33'h7fffffff;
                processing_element14_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element14_accumulator <= (-33'h80000000);
                processing_element14_overflow_flag <= 1'b1;
            end
            else begin
                processing_element14_accumulator <= temp_sum;
                processing_element14_overflow_flag <= 1'b0;
            end
            processing_element14_done_flag <= 1'b1;
            processing_element14_valid_product <= 1'b0;
        end
        else begin
            processing_element14_done_flag <= 1'b0;
        end
    end
end



assign pe_results[5] = processing_element14_accumulator;
assign pe_overflows[5] = processing_element14_overflow_flag;
assign pe_dones[5] = processing_element14_done_flag;



assign processing_element15_product = (a_slices[2] * b_slices[0]);


always @(posedge clk) begin: processing_element15_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element15_valid_product <= 0;
        processing_element15_product_latched <= 0;
        processing_element15_done_flag <= 0;
        processing_element15_accumulator <= 0;
        processing_element15_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element15_accumulator <= 0;
            processing_element15_product_latched <= 0;
            processing_element15_valid_product <= 1'b0;
            processing_element15_done_flag <= 1'b0;
            processing_element15_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element15_valid_product))) begin
            processing_element15_product_latched <= processing_element15_product;
            processing_element15_valid_product <= 1'b1;
            processing_element15_done_flag <= 1'b0;
        end
        else if (processing_element15_valid_product) begin
            temp_sum = (processing_element15_accumulator + processing_element15_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element15_accumulator <= 33'h7fffffff;
                processing_element15_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element15_accumulator <= (-33'h80000000);
                processing_element15_overflow_flag <= 1'b1;
            end
            else begin
                processing_element15_accumulator <= temp_sum;
                processing_element15_overflow_flag <= 1'b0;
            end
            processing_element15_done_flag <= 1'b1;
            processing_element15_valid_product <= 1'b0;
        end
        else begin
            processing_element15_done_flag <= 1'b0;
        end
    end
end



assign pe_results[6] = processing_element15_accumulator;
assign pe_overflows[6] = processing_element15_overflow_flag;
assign pe_dones[6] = processing_element15_done_flag;



assign processing_element16_product = (a_slices[2] * b_slices[1]);


always @(posedge clk) begin: processing_element16_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element16_valid_product <= 0;
        processing_element16_product_latched <= 0;
        processing_element16_done_flag <= 0;
        processing_element16_accumulator <= 0;
        processing_element16_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element16_accumulator <= 0;
            processing_element16_product_latched <= 0;
            processing_element16_valid_product <= 1'b0;
            processing_element16_done_flag <= 1'b0;
            processing_element16_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element16_valid_product))) begin
            processing_element16_product_latched <= processing_element16_product;
            processing_element16_valid_product <= 1'b1;
            processing_element16_done_flag <= 1'b0;
        end
        else if (processing_element16_valid_product) begin
            temp_sum = (processing_element16_accumulator + processing_element16_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element16_accumulator <= 33'h7fffffff;
                processing_element16_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element16_accumulator <= (-33'h80000000);
                processing_element16_overflow_flag <= 1'b1;
            end
            else begin
                processing_element16_accumulator <= temp_sum;
                processing_element16_overflow_flag <= 1'b0;
            end
            processing_element16_done_flag <= 1'b1;
            processing_element16_valid_product <= 1'b0;
        end
        else begin
            processing_element16_done_flag <= 1'b0;
        end
    end
end



assign pe_results[7] = processing_element16_accumulator;
assign pe_overflows[7] = processing_element16_overflow_flag;
assign pe_dones[7] = processing_element16_done_flag;



assign processing_element17_product = (a_slices[2] * b_slices[2]);


always @(posedge clk) begin: processing_element17_seq_logic
    integer temp_sum;
    if (i_reset == 1) begin
        processing_element17_valid_product <= 0;
        processing_element17_product_latched <= 0;
        processing_element17_done_flag <= 0;
        processing_element17_accumulator <= 0;
        processing_element17_overflow_flag <= 0;
    end
    else begin
        if (i_clear_acc) begin
            processing_element17_accumulator <= 0;
            processing_element17_product_latched <= 0;
            processing_element17_valid_product <= 1'b0;
            processing_element17_done_flag <= 1'b0;
            processing_element17_overflow_flag <= 1'b0;
        end
        else if ((i_data_valid && (!processing_element17_valid_product))) begin
            processing_element17_product_latched <= processing_element17_product;
            processing_element17_valid_product <= 1'b1;
            processing_element17_done_flag <= 1'b0;
        end
        else if (processing_element17_valid_product) begin
            temp_sum = (processing_element17_accumulator + processing_element17_product_latched);
            if ((temp_sum > 33'h7fffffff)) begin
                processing_element17_accumulator <= 33'h7fffffff;
                processing_element17_overflow_flag <= 1'b1;
            end
            else if ((temp_sum < (-33'h80000000))) begin
                processing_element17_accumulator <= (-33'h80000000);
                processing_element17_overflow_flag <= 1'b1;
            end
            else begin
                processing_element17_accumulator <= temp_sum;
                processing_element17_overflow_flag <= 1'b0;
            end
            processing_element17_done_flag <= 1'b1;
            processing_element17_valid_product <= 1'b0;
        end
        else begin
            processing_element17_done_flag <= 1'b0;
        end
    end
end



assign pe_results[8] = processing_element17_accumulator;
assign pe_overflows[8] = processing_element17_overflow_flag;
assign pe_dones[8] = processing_element17_done_flag;


always @(posedge clk) begin: fsm_control_logic
    if (i_reset == 1) begin
        state <= 1'b0;
        o_computation_done <= 0;
    end
    else begin
        if (i_reset) begin
            state <= 1'b0;
            o_computation_done <= 1'b0;
        end
        else begin
            case (state)
                1'b0: begin
                    o_computation_done <= 1'b0;
                    if (i_data_valid) begin
                        state <= 1'b1;
                    end
                end
                1'b1: begin
                    if (all_pes_done) begin
                        state <= 1'b0;
                        o_computation_done <= 1'b1;
                    end
                    else begin
                        state <= 1'b1;
                        o_computation_done <= 1'b0;
                    end
                end
            endcase
        end
    end
end



assign all_pes_done = (pe_dones[0] && pe_dones[1] && pe_dones[2] && pe_dones[3] && pe_dones[4] && pe_dones[5] && pe_dones[6] && pe_dones[7] && pe_dones[8]);



assign o_overflow_detected = (pe_overflows[0] || pe_overflows[1] || pe_overflows[2] || pe_overflows[3] || pe_overflows[4] || pe_overflows[5] || pe_overflows[6] || pe_overflows[7] || pe_overflows[8]);


always @(posedge clk) begin: result_matrix_logic
    if (i_reset == 1) begin
        temp_result_matrix <= 0;
    end
    else begin
        if ((i_reset || i_clear_acc)) begin
            temp_result_matrix <= 0;
        end
        else begin
            if (all_pes_done) begin
                temp_result_matrix[32-1:0] <= pe_results[0];
                temp_result_matrix[64-1:32] <= pe_results[1];
                temp_result_matrix[96-1:64] <= pe_results[2];
                temp_result_matrix[128-1:96] <= pe_results[3];
                temp_result_matrix[160-1:128] <= pe_results[4];
                temp_result_matrix[192-1:160] <= pe_results[5];
                temp_result_matrix[224-1:192] <= pe_results[6];
                temp_result_matrix[256-1:224] <= pe_results[7];
                temp_result_matrix[288-1:256] <= pe_results[8];
            end
            else begin
                temp_result_matrix <= temp_result_matrix;
            end
        end
    end
end


always @(temp_result_matrix, i_read_enable) begin: output_logic
    if (i_read_enable) begin
        o_result_matrix = temp_result_matrix;
    end
end

endmodule
