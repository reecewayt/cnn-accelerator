// File: gen/verilog/fp8_e4m3_mac.v
// Generated by MyHDL 0.11.51
// Date:    Mon May 12 19:04:50 2025 UTC


`timescale 1ns/10ps

module fp8_e4m3_mac (
    clk,
    rst,
    input_a,
    input_b,
    mac_start,
    clear_acc,
    read_enable,
    output_result,
    mac_done,
    ready_for_new
);
// Pipelined E4M3 floating-point MAC unit

input clk;
input rst;
input [7:0] input_a;
input [7:0] input_b;
input mac_start;
input clear_acc;
input read_enable;
output [7:0] output_result;
wire [7:0] output_result;
output mac_done;
wire mac_done;
output ready_for_new;
wire ready_for_new;

reg [1:0] acc_state;
reg [7:0] accumulator;
reg [7:0] add_a;
reg [7:0] add_b;
wire add_done;
reg add_pending;
wire [7:0] add_result;
reg add_start;
reg [7:0] mult_a;
reg [7:0] mult_b;
wire mult_done;
reg mult_pending;
wire [7:0] mult_result;
reg [7:0] mult_result_reg;
reg mult_start;
reg [1:0] mult_state;
reg [7:0] output_reg;
reg s_mac_done;
wire s_ready_for_new;
reg [7:0] fp8_e4m3_multiply0_a;
reg signed [6:0] fp8_e4m3_multiply0_a_exp;
reg fp8_e4m3_multiply0_a_is_nan;
reg fp8_e4m3_multiply0_a_is_zero;
reg [3:0] fp8_e4m3_multiply0_a_man;
reg fp8_e4m3_multiply0_a_sign;
reg [7:0] fp8_e4m3_multiply0_b;
reg signed [6:0] fp8_e4m3_multiply0_b_exp;
reg fp8_e4m3_multiply0_b_is_nan;
reg fp8_e4m3_multiply0_b_is_zero;
reg [3:0] fp8_e4m3_multiply0_b_man;
reg fp8_e4m3_multiply0_b_sign;
reg fp8_e4m3_multiply0_guard;
reg [7:0] fp8_e4m3_multiply0_product;
reg fp8_e4m3_multiply0_round_bit;
reg fp8_e4m3_multiply0_s_done;
reg [7:0] fp8_e4m3_multiply0_s_output_z;
reg [2:0] fp8_e4m3_multiply0_state;
reg fp8_e4m3_multiply0_sticky;
reg [7:0] fp8_e4m3_multiply0_z;
reg signed [6:0] fp8_e4m3_multiply0_z_exp;
reg [5:0] fp8_e4m3_multiply0_z_man;
reg fp8_e4m3_multiply0_z_sign;
reg [7:0] fp8_e4m3_add0_a;
reg signed [4:0] fp8_e4m3_add0_a_e;
reg [4:0] fp8_e4m3_add0_a_m;
reg fp8_e4m3_add0_a_s;
reg [7:0] fp8_e4m3_add0_b;
reg signed [4:0] fp8_e4m3_add0_b_e;
reg [4:0] fp8_e4m3_add0_b_m;
reg fp8_e4m3_add0_b_s;
reg signed [5:0] fp8_e4m3_add0_exp_diff;
reg fp8_e4m3_add0_guard;
wire [3:0] fp8_e4m3_add0_max_shifts;
reg fp8_e4m3_add0_round_bit;
reg fp8_e4m3_add0_s_done;
reg [7:0] fp8_e4m3_add0_s_output_z;
reg [3:0] fp8_e4m3_add0_state;
reg fp8_e4m3_add0_sticky;
reg [5:0] fp8_e4m3_add0_sum_val;
reg [7:0] fp8_e4m3_add0_z;
reg signed [4:0] fp8_e4m3_add0_z_e;
reg [3:0] fp8_e4m3_add0_z_m;
reg fp8_e4m3_add0_z_s;

assign fp8_e4m3_add0_max_shifts = 4'd5;


always @(posedge clk) begin: fp8_e4m3_multiply0_state_machine
    if (rst == 1) begin
        fp8_e4m3_multiply0_b_sign <= 0;
        fp8_e4m3_multiply0_b_exp <= 0;
        fp8_e4m3_multiply0_z_man <= 0;
        fp8_e4m3_multiply0_a_exp <= 0;
        fp8_e4m3_multiply0_b <= 0;
        fp8_e4m3_multiply0_b_man <= 0;
        fp8_e4m3_multiply0_b_is_nan <= 0;
        fp8_e4m3_multiply0_guard <= 0;
        fp8_e4m3_multiply0_sticky <= 0;
        fp8_e4m3_multiply0_round_bit <= 0;
        fp8_e4m3_multiply0_state <= 3'b000;
        fp8_e4m3_multiply0_product <= 0;
        fp8_e4m3_multiply0_a_is_nan <= 0;
        fp8_e4m3_multiply0_s_output_z <= 0;
        fp8_e4m3_multiply0_b_is_zero <= 0;
        fp8_e4m3_multiply0_z_exp <= 0;
        fp8_e4m3_multiply0_z_sign <= 0;
        fp8_e4m3_multiply0_a <= 0;
        fp8_e4m3_multiply0_s_done <= 0;
        fp8_e4m3_multiply0_a_man <= 0;
        fp8_e4m3_multiply0_a_is_zero <= 0;
        fp8_e4m3_multiply0_a_sign <= 0;
        fp8_e4m3_multiply0_z <= 0;
    end
    else begin
        if (rst) begin
            fp8_e4m3_multiply0_state <= 3'b000;
            fp8_e4m3_multiply0_s_done <= 0;
        end
        else begin
            case (fp8_e4m3_multiply0_state)
                3'b000: begin
                    fp8_e4m3_multiply0_s_done <= 0;
                    if (mult_start) begin
                        fp8_e4m3_multiply0_a <= mult_a;
                        fp8_e4m3_multiply0_b <= mult_b;
                        fp8_e4m3_multiply0_state <= 3'b001;
                    end
                end
                3'b001: begin
                    fp8_e4m3_multiply0_a_sign <= (fp8_e4m3_multiply0_a[(8 - 1)] != 0);
                    fp8_e4m3_multiply0_a_exp <= (fp8_e4m3_multiply0_a[(8 - 1)-1:3] - 7);
                    fp8_e4m3_multiply0_b_sign <= (fp8_e4m3_multiply0_b[(8 - 1)] != 0);
                    fp8_e4m3_multiply0_b_exp <= (fp8_e4m3_multiply0_b[(8 - 1)-1:3] - 7);
                    if ((fp8_e4m3_multiply0_a[(8 - 1)-1:3] != 0)) begin
                        fp8_e4m3_multiply0_a_man <= {1'h1, fp8_e4m3_multiply0_a[3-1:0]};
                    end
                    else begin
                        fp8_e4m3_multiply0_a_man <= {1'h0, fp8_e4m3_multiply0_a[3-1:0]};
                        fp8_e4m3_multiply0_a_exp <= (1 - 7);
                    end
                    if ((fp8_e4m3_multiply0_b[(8 - 1)-1:3] != 0)) begin
                        fp8_e4m3_multiply0_b_man <= {1'h1, fp8_e4m3_multiply0_b[3-1:0]};
                    end
                    else begin
                        fp8_e4m3_multiply0_b_man <= {1'h0, fp8_e4m3_multiply0_b[3-1:0]};
                        fp8_e4m3_multiply0_b_exp <= (1 - 7);
                    end
                    fp8_e4m3_multiply0_a_is_zero <= ((fp8_e4m3_multiply0_a[(8 - 1)-1:3] == 0) && (fp8_e4m3_multiply0_a[3-1:0] == 0));
                    fp8_e4m3_multiply0_b_is_zero <= ((fp8_e4m3_multiply0_b[(8 - 1)-1:3] == 0) && (fp8_e4m3_multiply0_b[3-1:0] == 0));
                    fp8_e4m3_multiply0_a_is_nan <= (($signed({1'b0, fp8_e4m3_multiply0_a[(8 - 1)-1:3]}) == ((1 << 4) - 1)) && ($signed({1'b0, fp8_e4m3_multiply0_a[3-1:0]}) == ((1 << 3) - 1)));
                    fp8_e4m3_multiply0_b_is_nan <= (($signed({1'b0, fp8_e4m3_multiply0_b[(8 - 1)-1:3]}) == ((1 << 4) - 1)) && ($signed({1'b0, fp8_e4m3_multiply0_b[3-1:0]}) == ((1 << 3) - 1)));
                    fp8_e4m3_multiply0_state <= 3'b010;
                end
                3'b010: begin
                    fp8_e4m3_multiply0_z_sign <= (fp8_e4m3_multiply0_a_sign ^ fp8_e4m3_multiply0_b_sign);
                    if ((fp8_e4m3_multiply0_a_is_nan || fp8_e4m3_multiply0_b_is_nan)) begin
                        fp8_e4m3_multiply0_z <= ((((1 << 4) - 1) << 3) | (1 << (3 - 1)));
                        fp8_e4m3_multiply0_state <= 3'b111;
                    end
                    else if ((fp8_e4m3_multiply0_a_is_zero || fp8_e4m3_multiply0_b_is_zero)) begin
                        fp8_e4m3_multiply0_z <= ($signed({1'b0, fp8_e4m3_multiply0_z_sign}) << (8 - 1));
                        fp8_e4m3_multiply0_state <= 3'b111;
                    end
                    else begin
                        fp8_e4m3_multiply0_state <= 3'b011;
                    end
                end
                3'b011: begin
                    if (((fp8_e4m3_multiply0_a_man[3] == 0) && (fp8_e4m3_multiply0_a_man != 0))) begin
                        fp8_e4m3_multiply0_a_man <= (fp8_e4m3_multiply0_a_man << 1);
                        fp8_e4m3_multiply0_a_exp <= (fp8_e4m3_multiply0_a_exp - 1);
                    end
                    else if (((fp8_e4m3_multiply0_b_man[3] == 0) && (fp8_e4m3_multiply0_b_man != 0))) begin
                        fp8_e4m3_multiply0_b_man <= (fp8_e4m3_multiply0_b_man << 1);
                        fp8_e4m3_multiply0_b_exp <= (fp8_e4m3_multiply0_b_exp - 1);
                    end
                    else begin
                        fp8_e4m3_multiply0_z_exp <= (fp8_e4m3_multiply0_a_exp + fp8_e4m3_multiply0_b_exp);
                        fp8_e4m3_multiply0_product <= (fp8_e4m3_multiply0_a_man * fp8_e4m3_multiply0_b_man);
                        if (((fp8_e4m3_multiply0_a_exp + fp8_e4m3_multiply0_b_exp) >= (7 + 2))) begin
                            fp8_e4m3_multiply0_z <= (($signed({1'b0, fp8_e4m3_multiply0_z_sign}) << (8 - 1)) | ((1 << 7) - 2));
                            fp8_e4m3_multiply0_state <= 3'b111;
                        end
                        else begin
                            fp8_e4m3_multiply0_state <= 3'b100;
                        end
                    end
                end
                3'b100: begin
                    if (fp8_e4m3_multiply0_product[((2 * (3 + 1)) - 1)]) begin
                        fp8_e4m3_multiply0_z_man <= fp8_e4m3_multiply0_product[((2 * (3 + 1)) - 1)-1:(((2 * (3 + 1)) - 3) - 1)];
                        fp8_e4m3_multiply0_z_exp <= (fp8_e4m3_multiply0_z_exp + 1);
                    end
                    else begin
                        fp8_e4m3_multiply0_z_man <= fp8_e4m3_multiply0_product[((2 * (3 + 1)) - 2)-1:(((2 * (3 + 1)) - 3) - 2)];
                    end
                    fp8_e4m3_multiply0_guard <= (fp8_e4m3_multiply0_product[2] != 0);
                    fp8_e4m3_multiply0_round_bit <= (fp8_e4m3_multiply0_product[1] != 0);
                    fp8_e4m3_multiply0_sticky <= (fp8_e4m3_multiply0_product[0] != 0);
                    fp8_e4m3_multiply0_state <= 3'b101;
                end
                3'b101: begin
                    if ((fp8_e4m3_multiply0_guard && (fp8_e4m3_multiply0_round_bit || fp8_e4m3_multiply0_sticky || fp8_e4m3_multiply0_z_man[0]))) begin
                        fp8_e4m3_multiply0_z_man <= (fp8_e4m3_multiply0_z_man + 1);
                        if (($signed({1'b0, fp8_e4m3_multiply0_z_man}) == ((1 << (3 + 1)) - 1))) begin
                            fp8_e4m3_multiply0_z_exp <= (fp8_e4m3_multiply0_z_exp + 1);
                        end
                    end
                    fp8_e4m3_multiply0_state <= 3'b110;
                end
                3'b110: begin
                    if ((fp8_e4m3_multiply0_z_exp < ((-7) - 3))) begin
                        fp8_e4m3_multiply0_z <= ($signed({1'b0, fp8_e4m3_multiply0_z_sign}) << (8 - 1));
                    end
                    else if ((fp8_e4m3_multiply0_z_exp < (-7))) begin
                        if ((((-7) - fp8_e4m3_multiply0_z_exp) <= 3)) begin
                            fp8_e4m3_multiply0_z <= (($signed({1'b0, fp8_e4m3_multiply0_z_sign}) << (8 - 1)) | $signed($signed({1'b0, fp8_e4m3_multiply0_z_man}) >>> ((-7) - fp8_e4m3_multiply0_z_exp))[3-1:0]);
                        end
                        else begin
                            fp8_e4m3_multiply0_z <= ($signed({1'b0, fp8_e4m3_multiply0_z_sign}) << (8 - 1));
                        end
                    end
                    else if ((fp8_e4m3_multiply0_z_exp >= (7 + 2))) begin
                        fp8_e4m3_multiply0_z <= ((($signed({1'b0, fp8_e4m3_multiply0_z_sign}) << (8 - 1)) | (((1 << 4) - 1) << 3)) | ((1 << 3) - 2));
                    end
                    else begin
                        fp8_e4m3_multiply0_z <= ((($signed({1'b0, fp8_e4m3_multiply0_z_sign}) << (8 - 1)) | ((fp8_e4m3_multiply0_z_exp + 7) << 3)) | fp8_e4m3_multiply0_z_man[3-1:0]);
                    end
                    fp8_e4m3_multiply0_state <= 3'b111;
                end
                3'b111: begin
                    fp8_e4m3_multiply0_s_output_z <= fp8_e4m3_multiply0_z;
                    fp8_e4m3_multiply0_s_done <= 1;
                    fp8_e4m3_multiply0_state <= 3'b000;
                end
            endcase
        end
    end
end



assign mult_result = fp8_e4m3_multiply0_s_output_z;
assign mult_done = fp8_e4m3_multiply0_s_done;


always @(posedge clk) begin: fp8_e4m3_add0_state_machine
    if (rst == 1) begin
        fp8_e4m3_add0_a_s <= 0;
        fp8_e4m3_add0_a_m <= 0;
        fp8_e4m3_add0_b <= 0;
        fp8_e4m3_add0_b_e <= 0;
        fp8_e4m3_add0_guard <= 0;
        fp8_e4m3_add0_sticky <= 0;
        fp8_e4m3_add0_b_s <= 0;
        fp8_e4m3_add0_round_bit <= 0;
        fp8_e4m3_add0_state <= 4'b0000;
        fp8_e4m3_add0_a_e <= 0;
        fp8_e4m3_add0_s_output_z <= 0;
        fp8_e4m3_add0_z_e <= 0;
        fp8_e4m3_add0_a <= 0;
        fp8_e4m3_add0_z_s <= 0;
        fp8_e4m3_add0_s_done <= 0;
        fp8_e4m3_add0_exp_diff <= 0;
        fp8_e4m3_add0_b_m <= 0;
        fp8_e4m3_add0_z_m <= 0;
        fp8_e4m3_add0_sum_val <= 0;
        fp8_e4m3_add0_z <= 0;
    end
    else begin
        if (rst) begin
            fp8_e4m3_add0_state <= 4'b0000;
            fp8_e4m3_add0_s_done <= 0;
        end
        else begin
            case (fp8_e4m3_add0_state)
                4'b0000: begin
                    fp8_e4m3_add0_s_done <= 0;
                    if (add_start) begin
                        fp8_e4m3_add0_a <= add_a;
                        fp8_e4m3_add0_b <= add_b;
                        fp8_e4m3_add0_state <= 4'b0001;
                    end
                end
                4'b0001: begin
                    fp8_e4m3_add0_a_s <= (fp8_e4m3_add0_a[(8 - 1)] != 0);
                    fp8_e4m3_add0_a_e <= (fp8_e4m3_add0_a[(8 - 1)-1:3] - 7);
                    fp8_e4m3_add0_a_m <= 5'h0;
                    fp8_e4m3_add0_b_s <= (fp8_e4m3_add0_b[(8 - 1)] != 0);
                    fp8_e4m3_add0_b_e <= (fp8_e4m3_add0_b[(8 - 1)-1:3] - 7);
                    fp8_e4m3_add0_b_m <= 5'h0;
                    if ((fp8_e4m3_add0_a[(8 - 1)-1:3] != 0)) begin
                        fp8_e4m3_add0_a_m <= {1'h1, fp8_e4m3_add0_a[3-1:0], 1'h0};
                    end
                    else begin
                        fp8_e4m3_add0_a_m <= {1'h0, fp8_e4m3_add0_a[3-1:0], 1'h0};
                        fp8_e4m3_add0_a_e <= ((-7) + 1);
                    end
                    if ((fp8_e4m3_add0_b[(8 - 1)-1:3] != 0)) begin
                        fp8_e4m3_add0_b_m <= {1'h1, fp8_e4m3_add0_b[3-1:0], 1'h0};
                    end
                    else begin
                        fp8_e4m3_add0_b_m <= {1'h0, fp8_e4m3_add0_b[3-1:0], 1'h0};
                        fp8_e4m3_add0_b_e <= ((-7) + 1);
                    end
                    if ((($signed({1'b0, fp8_e4m3_add0_a[(8 - 1)-1:3]}) - 7) > ($signed({1'b0, fp8_e4m3_add0_b[(8 - 1)-1:3]}) - 7))) begin
                        fp8_e4m3_add0_exp_diff <= (($signed({1'b0, fp8_e4m3_add0_a[(8 - 1)-1:3]}) - 7) - ($signed({1'b0, fp8_e4m3_add0_b[(8 - 1)-1:3]}) - 7));
                    end
                    else begin
                        fp8_e4m3_add0_exp_diff <= (($signed({1'b0, fp8_e4m3_add0_b[(8 - 1)-1:3]}) - 7) - ($signed({1'b0, fp8_e4m3_add0_a[(8 - 1)-1:3]}) - 7));
                    end
                    fp8_e4m3_add0_state <= 4'b0010;
                end
                4'b0010: begin
                    if (((($signed({1'b0, fp8_e4m3_add0_a[(8 - 1)-1:3]}) == ((1 << 4) - 1)) && ($signed({1'b0, fp8_e4m3_add0_a[3-1:0]}) == ((1 << 3) - 1))) || (($signed({1'b0, fp8_e4m3_add0_b[(8 - 1)-1:3]}) == ((1 << 4) - 1)) && ($signed({1'b0, fp8_e4m3_add0_b[3-1:0]}) == ((1 << 3) - 1))))) begin
                        fp8_e4m3_add0_z <= ((($signed({1'b0, fp8_e4m3_add0_z_s}) << (8 - 1)) | (((1 << 4) - 1) << 3)) | ((1 << 3) - 1));
                        fp8_e4m3_add0_state <= 4'b1010;
                    end
                    else if (((fp8_e4m3_add0_a[(8 - 1)-1:3] == 0) && (fp8_e4m3_add0_a[3-1:0] == 0))) begin
                        if (((fp8_e4m3_add0_b[(8 - 1)-1:3] == 0) && (fp8_e4m3_add0_b[3-1:0] == 0))) begin
                            fp8_e4m3_add0_z <= ((fp8_e4m3_add0_a_s & fp8_e4m3_add0_b_s) << (8 - 1));
                        end
                        else begin
                            fp8_e4m3_add0_z <= fp8_e4m3_add0_b;
                        end
                        fp8_e4m3_add0_state <= 4'b1010;
                    end
                    else if (((fp8_e4m3_add0_b[(8 - 1)-1:3] == 0) && (fp8_e4m3_add0_b[3-1:0] == 0))) begin
                        fp8_e4m3_add0_z <= fp8_e4m3_add0_a;
                        fp8_e4m3_add0_state <= 4'b1010;
                    end
                    else if ((((($signed({1'b0, fp8_e4m3_add0_a[(8 - 1)-1:3]}) == ((1 << 4) - 1)) && ($signed({1'b0, fp8_e4m3_add0_a[3-1:0]}) == ((1 << 3) - 2))) || (($signed({1'b0, fp8_e4m3_add0_b[(8 - 1)-1:3]}) == ((1 << 4) - 1)) && ($signed({1'b0, fp8_e4m3_add0_b[3-1:0]}) == ((1 << 3) - 2)))) && (fp8_e4m3_add0_a_s == fp8_e4m3_add0_b_s))) begin
                        fp8_e4m3_add0_z <= ((((fp8_e4m3_add0_a_s & fp8_e4m3_add0_b_s) << (8 - 1)) | (((1 << 4) - 1) << 3)) | ((1 << 3) - 2));
                        fp8_e4m3_add0_state <= 4'b1010;
                    end
                    else begin
                        fp8_e4m3_add0_state <= 4'b0011;
                    end
                end
                4'b0011: begin
                    if ((fp8_e4m3_add0_a_e > fp8_e4m3_add0_b_e)) begin
                        if ((fp8_e4m3_add0_exp_diff > $signed({1'b0, fp8_e4m3_add0_max_shifts}))) begin
                            fp8_e4m3_add0_z <= fp8_e4m3_add0_a;
                            fp8_e4m3_add0_state <= 4'b1010;
                        end
                        else begin
                            fp8_e4m3_add0_b_e <= (fp8_e4m3_add0_b_e + 1);
                            fp8_e4m3_add0_b_m <= (fp8_e4m3_add0_b_m >>> 1);
                            if (fp8_e4m3_add0_b_m[0]) begin
                                fp8_e4m3_add0_b_m[0] <= 1;
                            end
                        end
                    end
                    else if ((fp8_e4m3_add0_a_e < fp8_e4m3_add0_b_e)) begin
                        if ((fp8_e4m3_add0_exp_diff > $signed({1'b0, fp8_e4m3_add0_max_shifts}))) begin
                            fp8_e4m3_add0_z <= fp8_e4m3_add0_b;
                            fp8_e4m3_add0_state <= 4'b1010;
                        end
                        else begin
                            fp8_e4m3_add0_a_e <= (fp8_e4m3_add0_a_e + 1);
                            fp8_e4m3_add0_a_m <= (fp8_e4m3_add0_a_m >>> 1);
                            if (fp8_e4m3_add0_a_m[0]) begin
                                fp8_e4m3_add0_a_m[0] <= 1;
                            end
                        end
                    end
                    else begin
                        fp8_e4m3_add0_state <= 4'b0100;
                    end
                end
                4'b0100: begin
                    fp8_e4m3_add0_z_e <= fp8_e4m3_add0_a_e;
                    if ((fp8_e4m3_add0_a_s == fp8_e4m3_add0_b_s)) begin
                        fp8_e4m3_add0_sum_val <= (fp8_e4m3_add0_a_m + fp8_e4m3_add0_b_m);
                        fp8_e4m3_add0_z_s <= fp8_e4m3_add0_a_s;
                    end
                    else begin
                        if ((fp8_e4m3_add0_a_m >= fp8_e4m3_add0_b_m)) begin
                            fp8_e4m3_add0_sum_val <= (fp8_e4m3_add0_a_m - fp8_e4m3_add0_b_m);
                            fp8_e4m3_add0_z_s <= fp8_e4m3_add0_a_s;
                        end
                        else begin
                            fp8_e4m3_add0_sum_val <= (fp8_e4m3_add0_b_m - fp8_e4m3_add0_a_m);
                            fp8_e4m3_add0_z_s <= fp8_e4m3_add0_b_s;
                        end
                    end
                    fp8_e4m3_add0_state <= 4'b0101;
                end
                4'b0101: begin
                    if (fp8_e4m3_add0_sum_val[(3 + 2)]) begin
                        fp8_e4m3_add0_z_m <= fp8_e4m3_add0_sum_val[(3 + 3)-1:2];
                        fp8_e4m3_add0_guard <= (fp8_e4m3_add0_sum_val[1] != 0);
                        fp8_e4m3_add0_round_bit <= (fp8_e4m3_add0_sum_val[0] != 0);
                        fp8_e4m3_add0_sticky <= 1'b0;
                        fp8_e4m3_add0_z_e <= (fp8_e4m3_add0_z_e + 1);
                    end
                    else begin
                        fp8_e4m3_add0_z_m <= fp8_e4m3_add0_sum_val[(3 + 2)-1:1];
                        fp8_e4m3_add0_guard <= (fp8_e4m3_add0_sum_val[0] != 0);
                        fp8_e4m3_add0_round_bit <= 1'b0;
                        fp8_e4m3_add0_sticky <= 1'b0;
                    end
                    fp8_e4m3_add0_state <= 4'b0110;
                end
                4'b0110: begin
                    if (((fp8_e4m3_add0_z_m[3] == 0) && (fp8_e4m3_add0_z_e > ((-7) + 1)))) begin
                        fp8_e4m3_add0_z_e <= (fp8_e4m3_add0_z_e - 1);
                        fp8_e4m3_add0_z_m <= (fp8_e4m3_add0_z_m << 1);
                        fp8_e4m3_add0_z_m[0] <= fp8_e4m3_add0_guard;
                        fp8_e4m3_add0_guard <= fp8_e4m3_add0_round_bit;
                        fp8_e4m3_add0_round_bit <= 1'b0;
                    end
                    else begin
                        fp8_e4m3_add0_state <= 4'b0111;
                    end
                end
                4'b0111: begin
                    if ((fp8_e4m3_add0_z_e < ((-7) + 1))) begin
                        fp8_e4m3_add0_z_e <= (fp8_e4m3_add0_z_e + 1);
                        fp8_e4m3_add0_guard <= fp8_e4m3_add0_z_m[0];
                        fp8_e4m3_add0_z_m <= (fp8_e4m3_add0_z_m >>> 1);
                        fp8_e4m3_add0_round_bit <= fp8_e4m3_add0_guard;
                        fp8_e4m3_add0_sticky <= (fp8_e4m3_add0_sticky | fp8_e4m3_add0_round_bit);
                    end
                    else begin
                        fp8_e4m3_add0_state <= 4'b1000;
                    end
                end
                4'b1000: begin
                    if ((fp8_e4m3_add0_guard && (fp8_e4m3_add0_round_bit || fp8_e4m3_add0_sticky || fp8_e4m3_add0_z_m[0]))) begin
                        fp8_e4m3_add0_z_m <= (fp8_e4m3_add0_z_m + 1);
                        if (($signed({1'b0, fp8_e4m3_add0_z_m}) == ((1 << 3) - 1))) begin
                            fp8_e4m3_add0_z_e <= (fp8_e4m3_add0_z_e + 1);
                        end
                    end
                    fp8_e4m3_add0_state <= 4'b1001;
                end
                4'b1001: begin
                    fp8_e4m3_add0_z[3-1:0] <= fp8_e4m3_add0_z_m[3-1:0];
                    fp8_e4m3_add0_z[(8 - 1)-1:3] <= (fp8_e4m3_add0_z_e + 7);
                    fp8_e4m3_add0_z[(8 - 1)] <= fp8_e4m3_add0_z_s;
                    if (((fp8_e4m3_add0_z_e == ((-7) + 1)) && (fp8_e4m3_add0_z_m[3] == 0))) begin
                        fp8_e4m3_add0_z[(8 - 1)-1:3] <= 0;
                    end
                    if (((fp8_e4m3_add0_z_e <= ((-7) + 1)) && (fp8_e4m3_add0_z_m == 0))) begin
                        fp8_e4m3_add0_z[(8 - 1)] <= 0;
                    end
                    if ((fp8_e4m3_add0_z_e >= 7)) begin
                        fp8_e4m3_add0_z[(8 - 1)-1:3] <= ((1 << 4) - 1);
                        fp8_e4m3_add0_z[3-1:0] <= ((1 << 3) - 2);
                    end
                    fp8_e4m3_add0_state <= 4'b1010;
                end
                4'b1010: begin
                    fp8_e4m3_add0_s_output_z <= fp8_e4m3_add0_z;
                    fp8_e4m3_add0_s_done <= 1;
                    fp8_e4m3_add0_state <= 4'b0000;
                end
            endcase
        end
    end
end



assign add_result = fp8_e4m3_add0_s_output_z;
assign add_done = fp8_e4m3_add0_s_done;


always @(posedge clk) begin: multiply_pipeline
    if (rst == 1) begin
        mult_b <= 0;
        mult_a <= 0;
        mult_state <= 2'b00;
        mult_result_reg <= 0;
        mult_start <= 0;
    end
    else begin
        if (rst) begin
            mult_state <= 2'b00;
        end
        else begin
            case (mult_state)
                2'b00: begin
                    if (mac_start) begin
                        mult_a <= input_a;
                        mult_b <= input_b;
                        mult_state <= 2'b01;
                    end
                end
                2'b01: begin
                    mult_start <= 1;
                    mult_state <= 2'b10;
                end
                2'b10: begin
                    mult_start <= 0;
                    if (mult_done) begin
                        mult_result_reg <= mult_result;
                        mult_state <= 2'b00;
                    end
                end
            endcase
        end
    end
end


always @(posedge clk) begin: accumulate_pipeline
    if (rst == 1) begin
        s_mac_done <= 0;
        add_pending <= 0;
        accumulator <= 0;
        acc_state <= 2'b00;
        add_a <= 0;
        add_start <= 0;
        add_b <= 0;
    end
    else begin
        if (rst) begin
            acc_state <= 2'b00;
            accumulator <= 0;
            add_pending <= 0;
            s_mac_done <= 0;
        end
        else begin
            s_mac_done <= 0;
            case (acc_state)
                2'b00: begin
                    if (clear_acc) begin
                        accumulator <= 0;
                        add_pending <= 0;
                    end
                    else if ((mult_pending && (!add_pending))) begin
                        add_a <= mult_result_reg;
                        add_b <= accumulator;
                        add_pending <= 1;
                        acc_state <= 2'b01;
                    end
                end
                2'b01: begin
                    add_start <= 1;
                    acc_state <= 2'b10;
                end
                2'b10: begin
                    add_start <= 0;
                    if (add_done) begin
                        acc_state <= 2'b11;
                    end
                end
                2'b11: begin
                    accumulator <= add_result;
                    add_pending <= 0;
                    s_mac_done <= 1;
                    acc_state <= 2'b00;
                end
            endcase
        end
    end
end


always @(posedge clk) begin: mult_pending_control
    if (rst == 1) begin
        mult_pending <= 0;
    end
    else begin
        if (rst) begin
            mult_pending <= 0;
        end
        else begin
            if (((mult_state == 2'b10) && mult_done)) begin
                mult_pending <= 1;
            end
            else if ((acc_state == 2'b11)) begin
                mult_pending <= 0;
            end
            else if (clear_acc) begin
                mult_pending <= 0;
            end
        end
    end
end


always @(posedge clk) begin: output_control
    if (rst == 1) begin
        output_reg <= 0;
    end
    else begin
        if (rst) begin
            output_reg <= 0;
        end
        else begin
            if (read_enable) begin
                output_reg <= accumulator;
            end
        end
    end
end



assign output_result = output_reg;
assign mac_done = s_mac_done;
assign s_ready_for_new = ((mult_state == 2'b00) && (!mult_pending));
assign ready_for_new = s_ready_for_new;

endmodule
