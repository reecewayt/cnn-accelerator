// File: gen/verilog/simple_pe_basic.v
// Generated by MyHDL 0.11.51
// Date:    Tue May 27 21:48:52 2025 UTC


`timescale 1ns/10ps

module simple_pe_basic (
    clk,
    i_reset,
    i_a,
    i_b,
    i_enable,
    i_clear,
    o_result,
    o_overflow
);
// Simplified Processing Element without state machine
// 
// Even simpler version for maximum synthesis friendliness.
// Performs MAC operation in single clock cycle when enabled.

input clk;
input i_reset;
input signed [7:0] i_a;
input signed [7:0] i_b;
input i_enable;
input i_clear;
output signed [15:0] o_result;
wire signed [15:0] o_result;
output o_overflow;
wire o_overflow;

reg signed [15:0] accumulator;
reg overflow_reg;
wire signed [15:0] product;
reg signed [16:0] sum_result;


// Combinational multiplication

assign product = (i_a * i_b);

// Sequential accumulation with overflow handling
always @(posedge clk) begin: accumulate
    if (i_reset == 1) begin
        overflow_reg <= 0;
        sum_result <= 0;
        accumulator <= 0;
    end
    else begin
        if (i_clear) begin
            accumulator <= 0;
            overflow_reg <= 1'b0;
        end
        else if (i_enable) begin
            sum_result <= (accumulator + product);
            if ((sum_result > 32767)) begin
                accumulator <= 32767;
                overflow_reg <= 1'b1;
            end
            else if ((sum_result < (-32768))) begin
                accumulator <= (-32768);
                overflow_reg <= 1'b1;
            end
            else begin
                accumulator <= sum_result;
            end
        end
    end
end

// Output assignments

assign o_result = accumulator;
assign o_overflow = overflow_reg;

endmodule
